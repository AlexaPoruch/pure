<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:pure="http://beebole.com/pure">
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<title>Tutorial - Pure Unobtrusive Rendering Engine for HTML</title>
	    <link href="white.css" rel="stylesheet" type="text/css" title="black"/>
		<style type="text/css">
			#pureRuntime{width:70%;height:200px;background-color:#DEF}
			.htmlDoc{width:90%;background-color:#def;}
			.transformation{width:90%;background-color:#DEF;}
			.demo{display:none; border:solid 1px #ccc;background-color:#def;padding:10px}
		</style>
		<script type="text/javascript" src="../../library/jquery.js"></script>
		<script type="text/javascript" src="../js/pure.js"></script>
		<script type="text/javascript">

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   1 
 * * * * * * * * * * * * * * *  */
			function render1(){ 
				$('#hello').$pTransform( { "firstName": "Mary" } );}

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   2 
 * * * * * * * * * * * * * * * * */
			function lineClick(name){ alert(name); } // example1 of event attachment, still some research needed

			function swapStyle(obj, inOut){ // example2 for mouseover, mouseout
				obj.className = (inOut) ? 'player hover' : 'player';};
				
			function render2(){
				var context = ["Alice Keasler", "Charles LeGrand", "Gary Bitemning", "Helen Moren"];
				var directives = {
					'tbody tr td[onclick]':function(context,items, pos){ return 'lineClick(\''+items[pos]+'\');'},
					'tbody tr td[onmouseover]': '"swapStyle(this, true);"',
					'tbody tr td[onmouseout]' : '"swapStyle(this, false);"', //both '"..."' and "'...'" work now
					'tbody tr td[style]':"'cursor:pointer'"};

					$('table.players.1').$pTransform(context, directives);
				}

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   3 
 * * * * * * * * * * * * * * * * */
			function render3(){
				var context = {
					"id": "3456",
					sites: [{ 
						"name": "Beebole","url": "http://beebole.com"}, {
						"name": "BeeLit", "url": "http://beeLit.com"}, {
						"name": "PURE",	  "url": "http://beebole.com/pure"}]};
				
				$('ol.teamList').$pTransform( context, {'[id]':'id'});}

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   4 
 * * * * * * * * * * * * * * * * */
			function render4(){
				var context =["Alice Keasler", "Charles LeGrand", "Gary Bitemning", "Helen Moren"];
				
				var players2 = $('table.players.2')
				.$pMap( {'tbody tr' : 'player <- context',
					'tbody tr td' : 'player[]',
					'tbody tr[class]': function(context, items, pos){return (pos % 2 == 0) ? 'even' : 'odd';}});
		        $p.compile(players2, 'f4');
				$('#render4').html( $p.render('f4', context) );}

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   5 
 * * * * * * * * * * * * * * * * */
			var row = {
				odd: 'odd',
				even:'even',
				decorator: function(context, items, pos){
					return (pos % 2 == 1) ? this.even : this.odd;}}
					
			function lineNb(context, items, pos){
				return pos+1;}

			function render5(){
				var context = {
					'list': [['Cats', 
								[["Alice Keasler", 14], 
								["Charles LeGrand", 13], 
								["Gary Bitemning", 20], 
								["Helen Moren", 5]]], 
					
							['Cows', [["Mary Cain", 15], ["Vicky Benoit", 5], ["Wayne Dartt", 11]]], ['Dogs', [["Ray Braun", 13], ["Aaron Ben", 24], ["Steven Smith", 1], ["Kim Caffey", 19]]], ['Donkeys', [["Natalie Kinney", 16], ["Caren Cohen", 3]]]]};
				
				var scoreBoard = $('table.scoreBoard').$pMap({
					'tbody tr': 'teams <- list',
					'td.teamName': 'teams[0]'
				});
				
				var teamList = $('table.teamList', scoreBoard)
					.$pMap({
						'tbody tr': 'player <- teams[1]',
						'td.player': 'player[0]',
						'td.score': 'player[1]',
						'td.position': lineNb, //passing the pointer of a function that does not use "this"
						'tbody tr[class]': function(context, items, pos){ return row.decorator(context, items, pos) } }); //show how to wrap a method and not breack the use of "this"
				
				$('td.teamPlace', scoreBoard).html(teamList);
				$p.compile(scoreBoard, 'f5');
		        $('#render5').html( $p.render('f5', context) );}

/* * * * * * * * * * * * * * * * *
 *			E X A M P L E   6 
 * * * * * * * * * * * * * * * * */
			function render6(){
			
				var context = [ 
					{"name" : "Home", "url" : "#ho"}, 
					{"name" : "About", "url" : "http://about...", 
						"subMenu" : [
							{"name" : "History", "url" : "http://history..."},
							{"name" : "Team", "url" : "http://team..."},
							{"name" : "Offices", "url" : "http://offices...",
								"subMenu" : [
									{"name" : "Brussels", "url" : "http://brussels..."},
									{"name" : "New Delhi", "url" : "http://newdelhi..."}]}]},
			        {"name" : "Services", "url" : "http://services...",
						"subMenu" : [
							{"name" : "Web Design", "url" : "http://web..."},
							{"name" : "Development", "url" : "http://dev..."}]}];
			               
				var directive = {
				  "li" : "menu <-",
				  "a" : "menu.name", 
				  "a[href]" : "menu.url",
			     	  "ul.nav1 li" : "sub1 <- menu.subMenu",
			     	  "ul.nav1 li a" : "sub1.name", 
				  "ul.nav1 li a[href]" : "sub1.url",
			     	  "ul.nav2 li" : "sub2 <- sub1.subMenu",
			     	  "ul.nav2 li a" : "sub2['name']", //same result as sub2.name
				  "ul.nav2 li a[href]" : "sub2.url"};
				var menu = $('ul#nav').$pMap(directive);
				$p.compile(menu, 'f6');
				$('ul#nav').replaceWith( $p.render('f6', context));}

			function renderAll(){ $p.$f=[];$p.compiledFunctions={};render1();render2();render3();render4();render5();render6();}
		</script>
	</head>
	<body>
 		<div class="links"><a href="#" onclick="setActiveStyleSheet('black');return false;">Dark Night</a><span style="color:#52ABFF"> | </span><a href="#" onclick="setActiveStyleSheet('white');return false;">Bright Day</a>
				<br /><a href="quickStart.html">Quick Start</a><br />
				<a href="example1.html">Example 1</a><br />
				<a href="example2.html">Example 2</a><br />
				<a href="example3.html">Example 3</a><br />
				<a href="example4.html">Example 4</a><br />
				<a href="allExamples.html">All Examples</a><br />
				<a href="allExamplesCompiled.html">All Examples Compiled</a><br />
			<a href="http://groups.google.com/group/Pure-Unobtrusive-Rendering-Engine/post">Post</a> or <a href="mailto:Pure-Unobtrusive-Rendering-Engine@googlegroups.com">mail us</a><br /> your feedback
		</div>
		<div class="demo">
			<input type="button" onclick="render1();" value="render" />
			<div class="htmlDoc">
				<div id="hello"> 
					Hello <span class="who firstName">World</span>
				</div>
			</div>
			<div class="transformation">
				<div id="render1"></div>
			</div>
		</div>
		<div class="demo">
			In addition to the iteration, this example shows a way to attach events by a directive.<br />
			Mouse over the lines of the rendered table, and click on a line.<br/>
			<div class="htmlDoc">
				<input type="button" onclick="render2();this.disabled=true;this.value='Refresh the page to render again.'" value="render" />
                <table class="players 1">
                	<thead><tr><th class="player">Player</th></tr></thead>
					<tbody><tr class="context">
						<td class="player context">Chloe</td></tr>
					</tbody>
				</table>
			</div>
			<div class="transformation">
				<div id="render2"></div>
			</div>
		</div>
		<div class="demo">
			<div class="htmlDoc">
				<input type="button" onclick="render3();this.disabled=true;this.value='Refresh the page to render again.'" value="render" />
				<ol class="teamList id@id">
					<li class="player sites"><a class="name url@href" href="http://beebole.com">Beebole</a></li>
				</ol>
			</div>
			<div class="transformation">
				<div id="render3"></div>
			</div>
		</div>
		<div class="demo">
			<div class="htmlDoc">
				Here the target and the source HTML are the same. The HTML will replace itself.<br /> 
				<input type="button" onclick="render4();this.disabled=true;this.value='Refresh the page to render again.'" value="render" />
			</div>
			<div class="transformation">
				<div id="render4">
	                <table class="players 2">
	                    <thead><tr><th class="player">Player</th></tr></thead>
	                    <tbody><tr><td class="player">Chloe</td></tr></tbody>
	                </table>
				</div>
			</div>
		</div>
		<div class="demo">
			<div class="htmlDoc">
				<input type="button" onclick="render5();this.disabled=true;this.value='Refresh the page to render again.'" value="render" />
				<table class="scoreBoard">
				    <tbody>
				        <tr>
				            <td class="teamName">Team Name</td>
				            <td class="teamPlace">
				                <table class="teamList">
				                    <thead><tr><th class="position">Position</th><th class="player">Player</th><th class="score">Score</th></tr></thead>
				                    <tbody><tr><td class="position">1</td><td class="player">Chloe</td><td class="score">20</td></tr></tbody>
				                </table>
				            </td>
				        </tr>
				    </tbody>
				</table>
			</div>
			<div class="transformation">
				<div id="render5"></div>
			</div>
		</div>
		<div class="demo">
			<div class="htmlDoc">
				<input type="button" onclick="render6();this.disabled=true;this.value='Refresh the page to render again.'" value="render" />
				<ul  id="nav"> 
					<li><a href="#">About</a> 
						<ul class="nav1"> 
							<li><a href="#">Offices</a>
								<ul class="nav2">
									<li><a href="#">Brussels</a></li> 
								</ul>
							</li> 
						</ul> 
					</li> 
				</ul>
			</div>
		</div>

		<h3>Compile your HTML's into Javascript and save some Kb</h3>

		All the <a href="allExamples.html">examples</a> we provided are compiled on the fly, when you render them.<br />
		It is possible to compile them all in a javascript file.<br />
		Once you have this javascript version of your HTML templates, you can save it to a .js file and add it to your page using the &lt;script&gt; tag<br />
		By doing this you:<br />
		<ol><li><strong>Save some js processes:</strong> you can remove all the js related to the directives. And save the time spent on compiling.</li>
		<li><strong>Save some Kb:</strong> The js file will be cached and you can remove the pure.js file from your page if you do not have to compile any template.</li></ol>
		Click the button below to get all the HTML compiled and having the JS source code in the text area.<br />
		<input onclick="renderAll();$p.getRuntime(this);return false" value="get the PURE runtime file" type="button"></input></p>
		<textarea id="pureRuntime"></textarea>
		<p>Copy paste the content of the text area above to a JS file. Save it. You can even minify and/or gzip it.<br />
		Then include this JS file in your pages. Your compiled HTML's will be available and cached by the browser as any other JS file.</p>
		Here is an example of <a href="allExamplesCompiled.html">a page that uses compiled templates</a>
	</body>
</html>